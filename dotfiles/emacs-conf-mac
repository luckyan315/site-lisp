;;An's emacs

;;; Mac OS X Setup
;;; The Mac may fail to find cscope
(when (eq system-type 'darwin)
;;; exec path
  (setq exec-path (append '("/usr/local/bin")
                          exec-path)))

;; global path config
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/doxymacs")

(add-to-list 'load-path "~/.emacs.d/site-lisp/")
;; (add-to-list 'load-path "~/.emacs.d/~/.emacs.d/elpa")
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/org/contrib/lisp")

;; benchmark require
(add-to-list 'load-path "~/.emacs.d/site-lisp/benchmark-init-el/")
(require 'benchmark-init-loaddefs)
(benchmark-init/activate)

(package-initialize)

(require 'company-sourcekit)
(add-to-list 'company-backends 'company-sourcekit)

(require 'eopengrok)

(define-key global-map (kbd "C-c s i") 'eopengrok-create-index)
(define-key global-map (kbd "C-c s I") 'eopengrok-create-index-with-enable-projects)
(define-key global-map (kbd "C-c s d") 'eopengrok-find-definition)
(define-key global-map (kbd "C-c s f") 'eopengrok-find-file)
(define-key global-map (kbd "C-c s s") 'eopengrok-find-reference)
(define-key global-map (kbd "C-c s t") 'eopengrok-find-text)
(define-key global-map (kbd "C-c s h") 'eopengrok-find-history)
(define-key global-map (kbd "C-c s c") 'eopengrok-find-custom)
(define-key global-map (kbd "C-c s b") 'eopengrok-resume)

(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
(global-set-key (kbd "C-x C-r") 'sudo-edit)

;; helm-cscope
;; Enable helm-cscope-mode
(add-hook 'c-mode-hook 'helm-cscope-mode)
(add-hook 'c++-mode-hook 'helm-cscope-mode)
;; Set key bindings
(eval-after-load "helm-cscope"
  '(progn
     (define-key helm-cscope-mode-map (kbd "M-t") 'helm-cscope-find-symbol)
     (define-key helm-cscope-mode-map (kbd "M-r") 'helm-cscope-find-global-definition)
     (define-key helm-cscope-mode-map (kbd "M-g M-c") 'helm-cscope-find-called-function)
     (define-key helm-cscope-mode-map (kbd "M-g M-p") 'helm-cscope-find-calling-this-funtcion)
     (define-key helm-cscope-mode-map (kbd "M-s") 'helm-cscope-select)))

;; swift flycheck
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-swift3-setup))

;; cleanup
(defun cleanup-org-tables ()
  (save-excursion
    (goto-char (point-min))
    (while (search-forward "-+-" nil t) (replace-match "-|-"))
    ))

(add-hook 'markdown-mode-hook 'orgtbl-mode)
(add-hook 'markdown-mode-hook
          (lambda()
            (add-hook 'after-save-hook 'cleanup-org-tables  nil 'make-it-local)))

;;(scroll-bar-mode -1)

;; buffer regsion eval
(defun eval-region-or-buffer ()
  (interactive)
  (let ((debug-on-error t))
    (cond
     (mark-active
      (call-interactively 'eval-region)
      (message "Region evaluated!")
      (setq deactivate-mark t))
     (t
      (eval-buffer)
      (message "Buffer evaluated!")))))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (local-set-key (kbd "C-`") 'eval-region-or-buffer)))

;; doxymacs
(require 'doxymacs)
(defun my-doxymacs-font-lock-hook ()
    (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
        (doxymacs-font-lock)))
(add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
(global-set-key (kbd "M-<return>") 'doxymacs-insert-function-comment)

;; cpputil-cmake
;; stop create makefile for flymake
(setq cppcm-write-flymake-makefile nil)

(add-hook 'c-mode-common-hook
          (lambda ()
            (if (derived-mode-p 'c-mode 'c++-mode)
                (cppcm-reload-all)
              )))
;; OPTIONAL, somebody reported that they can use this package with Fortran
;; (add-hook 'c90-mode-hook (lambda () (cppcm-reload-all)))
;; OPTIONAL, avoid typing full path when starting gdb
;; (global-set-key (kbd "C-c C-g")
 ;; '(lambda ()(interactive) (gud-gdb (concat "gdb --fullname " (cppcm-get-exe-path-current-buffer)))))
;; OPTIONAL, some users need specify extra flags forwarded to compiler
;; (setq cppcm-extra-preprocss-flags-from-user '("-I/usr/src/linux/include" "-DNDEBUG"))

;; flymake
;; Let's run 8 checks at once instead.
(setq flymake-max-parallel-syntax-checks 8)

;; I don't want no steekin' limits.
(setq flymake-max-parallel-syntax-checks nil)

;; I want to see at most the first 4 errors for a line.
(setq flymake-number-of-errors-to-display 4)

;; I want to see all errors for the line.
(setq flymake-number-of-errors-to-display nil)


;; gtags
(autoload 'gtags-mode "gtags" "" t)

(setq c-mode-hook
'(lambda ()
(gtags-mode 1)))
(setq c++-mode-hook
'(lambda ()
(gtags-mode 1)))

(setq gtags-mode-hook
      '(lambda ()
	 (global-set-key (kbd "s-t") 'gtags-find-tag)
	 (global-set-key (kbd "s-r") 'gtags-find-rtag)
	 (global-set-key (kbd "s-.") 'gtags-find-symbol)
	 (global-set-key (kbd "s--") 'gtags-pop-stack)
))


;; helm-mode
(add-to-list 'load-path "~/.emacs.d/site-lisp/helm")
(require 'helm-config)
(require 'helm)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)

;; use package
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
;; (eval-when-compile
;;   (require 'use-package))

(add-hook 'after-init-hook 'global-company-mode)

(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;; line spacing
(setq-default line-spacing 4)

;; select ctags
(require 'etags-select)

(setq cc-other-file-alist
      '(("\\.c"   (".h"))
	("\\.cpp"   (".h"))
	("\\.h"   (".c"".cpp"))))

(setq ff-search-directories
      '("." "../src" "../include"))

;;; Bind the toggle function to a global key
(global-set-key "\M-t" 'ff-find-other-file)

;; switch between header and source files
(add-hook 'c-mode-common-hook
	  (lambda()
	        (local-set-key  (kbd "C-c o") 'ff-find-other-file)))

;; find ctag automaticly no prompt
(defun find-tag-no-prompt ()
  "Jump to the tag at point without prompting"
  (interactive)
  (find-tag (find-tag-default)))
;; don't prompt when finding a tag
(global-set-key (kbd "M-.") 'find-tag-no-prompt)

;; autoload ctags
(setq tags-revert-without-query 1)
(defalias 'yes-or-no-p 'y-or-n-p)

;; switch between multi-window
;; default key binding is follows
;; (global-set-key (kbd "C-x <up>") 'windmove-up-cycle)
;; (global-set-key (kbd "C-x <down>") 'windmove-down-cycle)
;; (global-set-key (kbd "C-x <right>") 'windmove-right-cycle)
;; (global-set-key (kbd "C-x <left>") 'windmove-left-cycle)
(require 'windcycle)

;; line width max chars
(setq-default fill-column 100)

;; find file in repository
;; (require 'find-file-in-repository)
(global-set-key (kbd "C-x f") 'find-file-in-project)

;; cmake
(require 'cmake-mode)

(require 'package) ;; You might already have this line
;; (add-to-list 'package-archives
;;	     '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" .
                                 "http://melpa-stable.milkbox.net/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(add-to-list 'package-archives
	     '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize) ;; You might already have this line

(load-theme 'material t)

;;
;; (require 'js2-mode)
;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; yasnippet
(add-to-list 'load-path "~/.emacs.d/site-lisp/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

;; ;;;; CC-mode配置  http://cc-mode.sourceforge.net/
(add-to-list 'load-path "~/.emacs.d/site-lisp/cc-mode")
(require 'cc-mode)
(c-set-offset 'inline-open 3)
(c-set-offset 'friend '-)
(c-set-offset 'substatement-open 0)
(c-set-offset 'innamespace 0)

;; special indent for namespace
(defconst my-cc-style
  '("c++-mode"
    (c-offsets-alist . ((innamespace . [0])))))

(c-add-style "my-cc-mode" my-cc-style)

;; ;;;;我的C++语言编辑策略
(defun my-c++-mode-hook()
  (c-set-style "Linux")
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)
  (setq c-basic-offset 4)
  ;;;minor modes
  (auto-fill-mode 1)
  ;; cscope hot-key would be not work!!!!!
  ;; (c-turn-on-eldoc-mode)
  ;;local keys
  (local-set-key [return] 'newline-and-indent)
  ;;  (define-key c++-mode-map [f3] 'replace-regexp)
  )

(add-hook 'c-mode-common-hook 'my-c++-mode-hook)
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;; flx support
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq flx-ido-use-faces nil)

;; desktop save
(desktop-save-mode 0)

;;show imenu list
(require 'imenu-list)
(global-set-key (kbd "C-o") #'imenu-list-minor-mode)

;;(Ctrl + `)  Eval lisp
(global-set-key (kbd "C-`") 'eval-last-sexp)

;;load xcscope
(require 'xcscope)
(cscope-setup)

(global-set-key (kbd "M--") 'previous-buffer)
(global-set-key (kbd "M-_") 'next-buffer)

;; emacs shortcut support on chrome
(require 'edit-server)
(edit-server-start)

;; disalbe toolbar
(tool-bar-mode -1)
(menu-bar-mode nil)

;; emacs whitespace mode
(require 'whitespace)
(global-whitespace-mode)
(setq whitespace-style
      '(face trailing tabs lines lines-tail empty
	     space-after-tab space-before-tab))
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq whitespace-style '(trailing lines space-before-tab
				  indentation space-after-tab)
            whitespace-line-column 100)

(global-set-key (kbd "M-[") 'backward-paragraph)
(global-set-key (kbd "M-]") 'forward-paragraph)


;;; 各窗口间切换
(global-set-key (kbd "M-<left>") 'windmove-left)

(global-set-key (kbd "M-<right>") 'windmove-right)

(global-set-key (kbd "M-<up>") 'windmove-up)

(global-set-key (kbd "M-<down>") 'windmove-down)

;; set the smooth-scroll
(add-to-list 'load-path "~/.emacs.d/site-lisp/smooth-scroll/")
(require 'smooth-scroll)

(global-set-key (kbd "M-n") 'scroll-up-1)
(global-set-key (kbd "M-p") 'scroll-down-1)

;;find-file-suggest
(require 'find-file-suggest)
(global-set-key [(control x) (meta f)] 'find-file-suggest)
(global-set-key [(control x) (meta g)] 'ffs-grep)

(ffs-create-file-index "cloudcard" "~/code/work/cloudcard/" "\\.js$\\|\\.json$\\|\\.lua" "\\doc$\\|\\node_modules$")

;; hightligt parenttheses
(require 'highlight-parentheses)

;;  show line numbers
(require 'linum)
(global-linum-mode 1)

;;### Scroll mode line###
(require 'scroll-mode-line-mode)
;;(toggle-scroll-bar 1)

;;include js2-mode
(require 'cr-js)

;; ;;js2-highlight vars
;; (require 'js2-highlight-vars)
;; (if (featurep 'js2-highlight-vars)
;;     (js2-highlight-vars-mode))

(add-to-list 'load-path "~/.emacs.d/site-lisp/ecb")
(require 'ecb)

;;comment/ uncomment
(defun qiang-comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
If no region is selected and current line is not blank and we are not at the end of the line,
then comment current line.
Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))
(global-set-key "\M-;" 'qiang-comment-dwim-line)

;; Smart copy, if no region active, it simply copy the current whole line
(defadvice kill-line (before check-position activate)
  (if (member major-mode
              '(emacs-lisp-mode scheme-mode lisp-mode
                                c-mode c++-mode objc-mode js-mode
                                latex-mode plain-tex-mode))
      (if (and (eolp) (not (bolp)))
          (progn (forward-char 1)
                 (just-one-space 0)
                 (backward-char 1)))))

(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy a single line instead."
  (interactive (if mark-active (list (region-beginning) (region-end))
                 (message "Copied line")
                 (list (line-beginning-position)
                       (line-beginning-position 2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

;; Copy line from point to the end, exclude the line break
(defun qiang-copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (point)
                  (line-end-position))
  ;; (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

(global-set-key (kbd "M-k") 'qiang-copy-line)

;; 显示列号
(setq column-number-mode t)

;; 不要总是没完没了的问yes or no, 为什么不能用y/n
(fset 'yes-or-no-p 'y-or-n-p)

;;highlight the word
(load-file "~/.emacs.d/site-lisp/highlight-symbol.el")
(require 'highlight-symbol)
;;(global-set-key "/C-cgg" 'highlight-symbol-at-point)
(global-set-key [(control f3)] 'highlight-symbol-at-point)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
(global-set-key [(meta f3)] 'highlight-symbol-prev)

;;在buffer和shell之间快速切换需要加载shell-toggle.el
(autoload 'shell-toggle "shell-toggle"
  "Toggles between the *shell* buffer and whatever buffer you are editing." t)
(autoload 'shell-toggle-cd "shell-toggle"
  "Pops up a shell-buffer and insert a \"cd <file-dir>\" command." t)
(global-set-key [C-] 'shell-toggle-cd)

;;在buffer和shell之间快速切换END
;;不产生备份文件,临时文件
(setq make-backup-files nil)
(setq-default make-backup-files nil)

;; menlo font
(set-frame-font "Menlo:pixelsize=12")
;; If you use Emacs Daemon mode
(add-to-list 'default-frame-alist
	     (cons 'font "Menlo:pixelsize=12"))

(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)
(global-set-key (kbd "s-+") 'text-scale-decrease)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#ffffff" "#f36c60" "#8bc34a" "#fff59d" "#4dd0e1" "#b39ddb" "#81d4fa" "#262626"))
 '(custom-safe-themes
   (quote
    ("98cc377af705c0f2133bb6d340bf0becd08944a588804ee655809da5d8140de6" default)))
 '(ecb-options-version "2.40")
 '(fci-rule-color "#3a3a3a")
 '(hl-sexp-background-color "#121212")
 '(safe-local-variable-values
   (quote
    ((ffip-prune-patterns "*/.git/*" "*/node_modules/*" "*/index.js")
     (ffip-patterns "*.java" "*.cpp" "*.c" "*.h" "*.js")
     (ffip-find-options . "-not -size +64k -not -iwholename '*/dist/*'")
     (ffip-project-root . "/Volumes/android/frameworks/"))))
 '(tab-stop-list
   (quote
    (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)))
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#f36c60")
     (40 . "#ff9800")
     (60 . "#fff59d")
     (80 . "#8bc34a")
     (100 . "#81d4fa")
     (120 . "#4dd0e1")
     (140 . "#b39ddb")
     (160 . "#f36c60")
     (180 . "#ff9800")
     (200 . "#fff59d")
     (220 . "#8bc34a")
     (240 . "#81d4fa")
     (260 . "#4dd0e1")
     (280 . "#b39ddb")
     (300 . "#f36c60")
     (320 . "#ff9800")
     (340 . "#fff59d")
     (360 . "#8bc34a"))))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; simpleclip
(require 'simpleclip)
(simpleclip-mode 1)

(global-set-key "\C-cx" 'simpleclip-cut)
(global-set-key "\C-cc" 'simpleclip-copy)
(global-set-key "\C-cv" 'simpleclip-paste)

(customize-variable (quote tab-stop-list))

(defun my-fullscreen ()
  (interactive)
  (set-frame-parameter nil 'fullscreen 'fullboth) ;this makes the frame go fullscreen
  (tool-bar-mode -1) ;these 3 lines turn off GUI junk
  (scroll-bar-mode -1)
  (menu-bar-mode -1))

(defun my-non-fullscreen ()
  (interactive)
  (set-frame-parameter nil 'width 82)
  (set-frame-parameter nil 'fullscreen 'fullheight)
  (menu-bar-mode t)) ;I don't turn tool-bar and scroll-bar back on b/c I never want them

(defun toggle-fullscreen ()
  (interactive)
  (if (eq (frame-parameter nil 'fullscreen) 'fullboth)  ;tests if already fullscreened
      (my-non-fullscreen)
    (my-fullscreen)))

(global-set-key [f9] 'toggle-fullscreen)
(global-set-key (kbd "s-<return>") 'toggle-fullscreen)
